package com.phcworld.phcworldboardservice.mock;

import com.phcworld.phcworldboardservice.infrastructure.dto.FreeBoardSearch;
import com.phcworld.phcworldboardservice.domain.FreeBoard;
import com.phcworld.phcworldboardservice.service.port.FreeBoardRepository;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;
import java.util.stream.Stream;

public class FakeFreeBoardRepository implements FreeBoardRepository {
    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<FreeBoard> data = new ArrayList<>();

    @Override
    public List<FreeBoard> findByWriterId(String writerId) {
        return data.stream().filter(freeBoard -> freeBoard.getWriterId().equals(writerId)).toList();
    }

    @Override
    public Optional<FreeBoard> findById(Long id) {
        return data.stream().filter(freeBoard -> freeBoard.getId().equals(id)).findAny();
    }

    @Override
    public FreeBoard save(FreeBoard freeBoard) {
        if(freeBoard.getId() == null || freeBoard.getId().equals(0L)){
            FreeBoard newFreeBoard = FreeBoard.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .title(freeBoard.getTitle())
                    .contents(freeBoard.getContents())
                    .writerId(freeBoard.getWriterId())
                    .countOfAnswer(freeBoard.getCountOfAnswer())
                    .count(freeBoard.getCount())
                    .createDate(freeBoard.getCreateDate())
                    .updateDate(freeBoard.getUpdateDate())
                    .isDeleted(freeBoard.isDeleted())
                    .build();
            data.add(newFreeBoard);
            return newFreeBoard;
        } else {
            data.removeIf(f -> Objects.equals(f.getId(), freeBoard.getId()));
            data.add(freeBoard);
            return freeBoard;
        }
    }

    @Override
    public Optional<FreeBoard> findByBoardId(String boardId) {
        return data.stream().filter(freeBoard -> freeBoard.getBoardId().equals(boardId)).findAny();
    }

    @Override
    public List<FreeBoard> findByKeyword(FreeBoardSearch searchDto) {
        PageRequest pageRequest = PageRequest.of(
                searchDto.pageNum() - 1,
                searchDto.pageSize(),
                Sort.by("createDate").descending());
        Stream<FreeBoard> stream = null;
        if(searchDto.searchType().equals(0)) {
            stream = data.stream()
                    .filter(freeBoard -> freeBoard.getTitle().contains(searchDto.keyword()));
        } else if(searchDto.searchType().equals(1)){
            stream = data.stream()
                    .filter(freeBoard -> freeBoard.getContents().contains(searchDto.keyword()));
        } else {
            List<String> ids = searchDto.userIds();
            stream = data.stream()
                    .filter(freeBoard -> ids.contains(freeBoard.getWriterId()));
        }
        return stream.skip(pageRequest.getOffset() * pageRequest.getPageSize())
                .limit(pageRequest.getPageSize())
                .toList();
    }
}
